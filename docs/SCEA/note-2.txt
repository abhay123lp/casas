Chapter 3 Object-Oriented Analysis and Design
=================================================================
Project Life Cycle
    Analysis        
        Requirements analysis: 
          define detailed requirements and the externally visible characteristics of the system. Write a validation plan
          Short form: Is it possible to resolve the requirements?
        System-context analysis
          Define the context of the system via use cases and scenarios. External messages, events, and actions are defined. The system is treated as a black box.
          Short form: What would the big picture solution look like?
        Model analysis:
          Identify the classes, objects, and associations that solve the problem. 
          Response behavior is modeled using state charts. 
          Interaction among objects is shown with sequence or collaboration diagrams. 
          Short form: A further refinement of the big picture solution arrived at by decomposing subsystems into high-level classes.
    
    Design
        Architectural design
          Physical architecture of the system is modeled using deployment diagrams, 
          software component architecture is modeled using component diagrams, 
          concurrency models are captured using class diagrams identifying the active objects. 
          Design patterns are used here as well.
        Mechanistic design
          Define the collaborative behavior of classes and objects. 
          Sequence and collaboration diagrams capture specific instances of collaborations and state charts are enhanced to define the full behavior
        Detailed design
          Define the detailed behavior and structure of individual classes using activity diagrams and notations

    Development

    Implementation
        Unit testing
        Integration testing
        Validation testing
        System delivered

RUP
    The RUP identifies four phases for projects.
    1. Inception    The focus of this phase is the project scope.
    2. Elaboration  The architecture as well as the requirements of the product being built must be defined by the end of this phase.
    3. Construction The software must be developed or constructed in this phase.
    4. Transition   The software must be rolled out to users during this phase.


Elements Used in UML
Relationships Used in UML
    Generalization
    	A specialized version of another class 
    	Solid line with a closed arrowhead pointing to the more general class
    Association 
    	Uses the services of another class
    	Solid line connecting the associated classes,with an optional open arrowhead showing direction of navigation
	Aggregation 
		A class ¡°owns¡± another class 
		A form of association with an unfilled diamond at the ¡°owner¡± end of the association
	Composition 
		A class is composed of another class;refers to an aggregation within which the component parts and the larger encompassing whole share a lifetime
		A form of aggregation, shown with either a filled diamond at the ¡°composite¡± end, or with the composite graphically containing the ¡°component¡±
	Refinement 
		A refined version of another class;refinement within a given model can be shown as a dependency with the stereotype <<refines>> or one of its more specific forms, such as <<implements>>
		Dashed line with a closed hollow arrowhead pointing to the more refined class
	Dependency 
		A class dependent on another class 
		Dashed line with an open arrowhead pointing to the dependency

Diagrams Used in UML
  activity diagram vs state diagram
  sequence diagram vs collaboration diagram

Practical Use of UML Diagrams
  Use Case Diagram
	The use case lends itself to a problem-centric approach to analysis and design.
	Use cases are the functions or services of the system¡ªthose that are visible to its actors.
	Use case diagrams are closely connected to scenarios. A scenario is an example of what happens when someone interacts with the system. 
	For example, here is a scenario for a security trade: a trader accesses an Internet-based system and chooses the type of security he or she wants to place a trade order to buy or sell

  Class Diagram
  
  Package Diagram
  
  Sequence Diagrams
  
  Collaboration Diagrams
  
  State Diagrams
  
  Activity Diagrams
  
  Component Diagram
    Component diagrams are physical versions of class diagrams.
  
  Deployment Diagram


Chapter 4 Applicability of JEE Technology
=================================================================
CERTIFICATION OBJECTIVE 4.01 - Explain the JEE Architecture and System Requirements
------------------------------------------------------------------
CORBA
  The main component of CORBA is the Object Request Broker (ORB). It encapsulates
  the communication infrastructure necessary to locate objects, manage connections,
  and deliver data. 
  
  The ORB core is responsible for the communication of requests. The basic functionality 
  provided by the ORB consists of passing the requests from clients to the object 
  implementations on which they are invoked. The ORB then transfers the request to 
  the object implementation, which receives the request, processes it, and returns an 
  object result.


The Data Layer
  The data layer is responsible for data management. A data layer may be as simple as a modern relational database; 
  on the other hand, it may include data access procedures to other data sources such as nonrelational databases, legacy files, or message-oriented middleware.
  
  To avoid making an application less interoperable, the architect should strive to keep validation and business logic out of the data layer; that logic belongs in the business logic layer. Sometimes basic database design rules can overlap with business logic. There is usually some basic business logic in the data tier.

JEE Application Components

Development Methodology and Process
  application frameworks provide components and services based on the best patterns, practices, and standards available. The ideal framework would implement extendable design patterns on the presentation, business, and data/services layers.

JEE Application Assembly
  The assemblers or deployers can edit the deployment properties directly. 

  They map internal references along with server-specific properties to JNDI or other names of any references, which include the following:
    Database connection pools
    Mail sessions
    URL connections
    JMS queues and topics
    EJB references

  The application assemblers perform the following tasks to deliver an EAR file containing the JEE application:
    Assemble EJB JAR and WAR files into a JEE application (EAR) file.
    Specify the deployment descriptor for the JEE application.
    Verify that the contents of the EAR file are well formed and comply with the JEE specification.

JEE Application Deployment
  Duties include setting security attributes, setting transaction controls, and specifying database connection pools.
  During configuration, the deployer resolve external dependencies, specify security settings, and assign transaction attributes.
  The deployer performs the following tasks to install and configure a JEE application:
    Stage the initial JEE application (EAR) file created in the preceding phase to the JEE server.
    Configure the JEE application for the operational environment by modifying the DD of the JEE application.
    Verify that the contents of the EAR file are well formed and comply with the JEE specification.
    Deploy (install) the JEE application EAR file into the JEE server



CERTIFICATION OBJECTIVE 4.02 - Explain the Use of Patterns in the JEE Framework
------------------------------------------------------------------
  In the context of computer architecture, design patterns are proven solutions to recurring business problems. They consider the particular context of the problem and the consequences of the solution. 
  A good designer will use a pattern because it is proven¡ªthat is, the designer has used it before successfully or has built and validated a proof of concept. 
  When a problem is common, a good designer doesn¡¯t have to devise a new solution; instead, he or she follows the pattern and adapts it to the current environment.
  Good architects use the experience, knowledge, and insights of developers who have used these patterns successfully in their own work. 


  Pattern			JEE Implementation
  --------------------------------------
  Proxy				EJB remote interface
  Decorator			EJBObject
  Factory Method	EJBHome interface
  Abstract Factory	EJBHome interface

CERTIFICATION OBJECTIVE 4.03 - Describe the Concepts of ¡°Best Practices¡± and ¡°Guidelines¡±
------------------------------------------------------------------
A best practice is a technique used to drive design at the component level. 
A best practice is an optimal process that is recognized by peers in similar situations.
It is applicable to a cross-section of scenarios with varying resources and sizes.
It takes design requirements into consideration. 
For example, a best practice might be to use session beans as facades to entity beans.

On the other hand, a guideline is a rule applied horizontally to the design.
Guidelines reflect agreements on practices or operations by recognized professional associations. 
This includes formal, approved standards, as contrasted to de facto standards and proprietary standards that are exceptions to this concept. 
For example, to minimize network traffic, the architect attempts to maximize the content of a data request¡ªthat is, we try to get as much as we can out of each request.

------------------------------------------------------------------

CERTIFICATION OBJECTIVE 4.04 - Illustrate MVC Parttern

MVC offers the following benefits:
  Clarifies application design through separation of data modeling issues from data display and user interaction
  Allows the same data to be viewed in many ways and by many users
  Simplifies impact analysis, thereby improving extensibility
  Facilitates maintenance by encapsulating application functions behind trusted APIs
  Enhances reusability by separating application functionality from presentation
  Facilitates distribution of the application, as MVC boundaries are natural distribution interface points
  Can be used to divide deployment as well as make incremental updates possible 
  Forces clear designation of responsibilities and functional consistency, thereby facilitating testability
  Increases flexibility, because data model, user interaction, and data display can be made ¡°pluggable¡±


MVC designs may encounter the following problems:
  Components aren¡¯t able to take advantage of knowledge of other components¡¯ implementation details.
  Communication volume and other latency issues must be carefully addressed; otherwise, MVC may not scale well in distributed systems.
  Maintenance of an MVC application may be difficult if the Model API is unstable, because the Controller is written in terms of the Model API.

CERTIFICATION OBJECTIVE 4.05 - Review Best Practices Applicable for All Tiers
------------------------------------------------------------------

CERTIFICATION OBJECTIVE 4.06 - Review Best Practices for the Client Tier
------------------------------------------------------------------

CERTIFICATION OBJECTIVE 4.07 - Enumerate the Components and Categories of the Web Tier
------------------------------------------------------------------

CERTIFICATION OBJECTIVE 4.09 - Review the Best Practices for the Presentation Layer
------------------------------------------------------------------
To avoid needlessly complex presentation components in the web tier, follow these practices:
  Separate HTML from Java.
  Try to place business logic in JavaBeans.
  Factor general behavior out of custom tag handler classes.
  Favor HTML in Java handler classes over Java in JSPs.
  Use an appropriate inclusion mechanism.
  Use a JSP template mechanism.
  Use style sheets.
  Use the MVC pattern.
  Use available custom tag libraries.
  Determine the appropriate level of XML compliance.
  Use JSP comments in most cases.
  Follow HTML best practices.
  Utilize the JSP exception mechanism.


The EJB Tier
  JEE Best Practices: Data Access Objects
    The data-access object (DAO) pattern separates the interface to a system resource from the code used to access that resource by encapsulating the access to the data. Each enterprise bean that accesses a back-end resource in the application may have an associated DAO class, which defines an abstract API of operations on the resource. This allows a clean separation of bean and database access code.
  
  JEE Best Practices: Value Objects
    A Value Object represents a composite value from the server, not a reference to an object on the server. Value Objects are ad hoc groupings of data values to support a use case (or group of use cases).Value Objects can be used for fine-grained business objects that represent structure with get/set behavior only. Use a Value Object when the business entity being modeled has
      Only methods that get values from the object¡¯s internal state (that is, immutable state)
      A life cycle that is completely controlled by another object
      A relatively small size

  JEE Best Practices: Session Bean Facade

  JEE Best Practices: Master Detail
    A master-detail relationship is a one-to-many type relationship.

  JEE Best Practices: EIS Integration Tier
    JEE reduces the complexity of accessing an enterprise information system by relying on the web and EJB containers to handle transactions, security, and scalability. 
    JDBC accesses relational data. 
    JNDI accesses enterprise name and directory services. 
    JMS sends and receives messages using enterprise messaging systems. 
    JavaMail sends and receives mail. 
    JavaIDL calls CORBA services. 
    JNI calls services written in other languages¡ªJNI can interact with native languages.
    
JEE Connector Overview
  The JEE Connector architecture defines the following set of system-level contracts between an application server and EIS:
    A Connection Management contract. This leads to a scalable application environment that can support a large number of clients requiring access to EISs.
    A Transaction Management contract between the transaction manager and an EIS. This contract lets an application server use a transaction manager to manage transactions across multiple resource managers. This contract also supports transactions that are managed internal to an EIS resource manager without the necessity of involving an external transaction manager.
    A Security Contract that enables a secure access to an EIS.
  
CERTIFICATION OBJECTIVE 4.11 - Illustrate When to Use JEE Technology for Given Situations
------------------------------------------------------------------------------------


Performance-Related Best Practices: Data Caching
Here are some tips:
  If clients have slow back-end connections, consider compressing data for network communication.
  Minimize the number of network round trips required by the application.
  For applications to scale to many users, minimize the amount of shared memory that requires updating.
  Cache data to minimize lookup time, although this can reduce scalability if locks are required to access the cache.
  If there are more accesses than updates to a cache, share the access lock among all the accessors, but be aware that this reduces the window for updaters to lock the cache.
  Eliminate memory leaks before tuning execution speed.
  Ensure that the development environment approximates/simulates the production deployment environment.
  Consider metrics: maximum response ratio and CPU utilization under various activity loads. How well does the application scale when additional users are added?
  Spend your time wisely: For example, improving the performance of a method that is called 1000 times is better than improving the performance of a method that is called only 10 times.
  Don¡¯t cache data unless you know how and when to invalidate the cached entries.


JEE Best Practices: For Services
  If an EJB service for an object is overkill (for example, if the object will only be accessed locally), use a plain Java object and not an EJBObject.
  You can use local interfaces if EJB calls another EJB (or a servlet calling an EJB) from the same container and the same virtual machine.
  Wrap entity beans in a session bean to change multiple EJB remote calls into one session bean remote call and several local calls. (session bean facade.)
  Change multiple remote method calls into one remote method call with all the data combined into a parameter object.
  Control serialization by modifying unnecessary data variables with a transient keyword to avoid unnecessary data transfer over network.
  Cache EJBHome references to avoid JNDI lookup overhead (ServiceLocator).
  Declare nontransactional methods of session beans with NotSupported or Never transaction attributes. If the code calling a method in this bean has a transaction running, suspend that transaction until the method called in this bean completes. No transaction context is created for this bean.
  Transactions should span the minimum time possible as transactions lock database rows. This depends on transaction isolation that is defined in terms of isolation levels called dirty reads, repeatable reads, and phantom reads.

Transactions
  In container-managed transaction demarcation, six different transaction attributes:

     Never
       Method calls require that no transaction context be present. The bean must never run with a transaction. If a transaction exists, the java.rmi.RemoteException exception is thrown.
  	   ²»ÄÜÓÐÊÂÎñ´æÔÚ£¬·ñÔòÅ×³öÀýÍâ¡£
  	   Never can be used when it is necessary to verify the transaction isn't associated with the client.

     NotSupported
       The bean runs outside the context of a transaction. Existing transactions are suspended during method calls. The bean cannot be invoked within a transaction. An existing transaction is suspended until the method called in this bean completes.
  	   ±ØÐëÔÚÀýÍâÖÐÖ´ÐÐ£¬±ØÒªÊ±ÏÈ½«µ±Ç°ÊÂÎñ¹ÒÆð¡£
  	   The NotSupported attribute can be used when the resource manager is not supported by the JEE product.

     Supports
       Method calls use the current transaction context if one exists but don¡¯t create one if none exists. The container will not start a new transaction. If a transaction already exists, the bean will be included in that transaction. Note that with this attribute, the bean can run without a transaction.
  	   ÎÞËùÎ½ÊÇ·ñÓÐÊÂÎñ¡£
  	   The BluePrint recommends not using the attribute Supports.
     
     Required
       Method calls require a transaction context. If one already exists, it will be used; if one does not exist, it will be created.
  	   ±ØÐëÔÚÊÂÎñÖÐÖ´ÐÐ£¬µ«ÊÇÎÞËùÎ½ÊÂÎñÓÉË­´´½¨¡£
  	   Use Required for the default transaction attribute.
     
     RequiresNew	
       A new transaction is always started when the bean method is called. If a transaction already exists, that transaction is suspended until the new transaction completes.
  	   ±ØÐëÔÚÎÒ×Ô¼ºµÄÊÂÎñÖÐÖ´ÐÐ£¬²»ÒªÊ±ÏÈ¹ÒÆð±ðÈËµÄÊÂÎñ¡£
  	   Use RequiresNew attribute when the bean methods need to commit unconditionally.
     
     Mandatory		Method calls require a transaction context. If one does not exist, the javax.ejb.TransactionRequired exception is thrown.
  		±ØÐëÔÚ±ðÈËµÄÊÂÎñÖÐÖ´ÐÐ£¬·ñÔòÅ×³öÀýÍâ¡£
  		Mandatory can be used when it is necessary to verify the transaction is associated with the client.
     

  
The Factory Method provides ability to define a contract for creating an object but defers instantiation to subclasses. 
The Abstract Factory provides a contract for creating families of related or dependent objects without specifying concrete classes
