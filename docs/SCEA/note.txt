Charpter 1: Overview
==================================================
Portal Framework
    Components

EBusiness Services
    Content Management
    Content caching
    Web Publishing
    Workflow
    Personalization
    User Profiling
    Rules Engine
    XML Integration
    Single Sign On
    Search Engine

JavaEE Server
    Presentation
    Business Logic
    Transaction
    Messaging
    Scalability
    Reliability
    Security
    Management

Charpter 2: Architecture and Protocols
==================================================
Non-functional Requirements:
  Time:
      Performance
      Reliability
  Space:
      Scalability
      Extensibility
      Portability
  CostOfUse:
      Maintainability
      Availability
      Manageability
      Testability
      Flexibility
  Security
      Security

Architect's role:
  Architects visualize the behavior of a system. 
  Architects create the BluePrint for the system, 
  Architects define the way in which the elements of the system work together. 
  Architects distinguish between functional and nonfunctional system requirements, 
  Architects are responsible for integrating nonfunctional requirements into the system.

Types of Architecture:
  Architecture refers to an abstract representation of a system¡¯s components and behaviors. Architecture satisfies the functional and nonfunctional requirements of the client and is flexible enough to evolve when the requirements change.

  System Architecture:
    System architecture must consider the functions of components, their interfaces, interactions, and constraints


Steps in Software Development
  requirement analysis 
    The requirement analysis describes what the system should do. 
    Analysts generate domain models:classes, objects, and interactions. 
    The requirement analysis should theoretically be free from any technical or implementation details and should contain an ideal model

  object-oriented analysis
    This phase involves the analysis of the domain. The analysts would do the following:
      Develop use case diagrams for all the business processes. Use case diagrams are high-level descriptions of the system actors and the system functionality.
      Develop sequence diagrams. These diagrams show the sequence of operation as a function of time.
      Develop class diagrams. Class diagrams show the system functionality as classes and their methods.
      Develop collaboration diagrams. Collaboration diagrams depict how the classes interact.

  architectural analysis, 
    This phase tries to give a framework within which all the components will work to satisfy all the customer requirements.
    Pragmatically, the architect would work out a solution that takes into account security, performance, and cost, as well as considers reusing existing technology and business logic in the legacy system.
    From the object-oriented design perspective, the architect would do the following:
     Develop package dependency diagrams.
     Decide how the classes in different packages interact.
     Develop deployment diagrams.
     Decide where the software components will reside in deployment.

  object-oriented design 
    In this phase, the design for the implementation is complete, and the decision is made.
    All the classes are defined with their intended directory hierarchies identified. 
    Design patterns are used, and object reuse is considered. 
    Any architectural considerations arising out of the implementation design are discussed.

Architectural Terminology
  
Principles of Architecture
  Layering (Page 37)
  ...

Capabilities and System Quality

  System Quality	Definition
  -----------------------------------------------------
  Availability 	The degree to which a system is accessible. The term 24¡Á7 describes total availability. This aspect of a system is often coupled with performance.
  Reliability 	The ability to ensure the integrity and consistency of an application and its transactions.
  Manageability 	The ability to administer and thereby manage the system resources to ensure the availability and performance of a system with respect to the other capabilities.
  Flexibility 	The ability to address architectural and hardware configuration changes without a great deal of impact to the underlying system.
  Performance 	The ability to carry out functionality in a timeframe that meets specified goals.
  Capacity 		The ability of a system to run multiple tasks per unit of time.
  Scalability 	The ability to support the required availability and performance as transactional load increases.
  Extensibility 	The ability to extend functionality.
  Validity 		The ability to predict and confirm results based on a specified input or user gesture.
  Reusability 	The ability to use a component in more than one context without changing its internals.
  Security 		The ability to ensure that information is not accessed and modified unless done so in accordance with the enterprise policy.


Security
  Single Sing On requires a rich infrastructure of network and system services.
  The classes of threats includes 
      accidental threats, 
      intentional threats, 
      passive threats (those that do not change the state of the system but may include loss of confidentiality), 
      active threats (those that change the state of the system, including changes to data and to software).
  A security policy is an enterprise¡¯s statement defining the rules that regulate how it will provide security, handle intrusions, and recover from damage caused by security breaches
  A standard set of Security services includes the following:
      Identification and authentication 
      Access control and authorization 
      Accountability and auditing 
      Data confidentiality 
      Data integrity and recovery
      Data exchange 
      Object reuse 
      Non-repudiation of origin and delivery 
      Reliability

Creating an Architecture Using Distributed Services and JEE
    Industry experience shows that integrating legacy resources can take up to 50 percent of application development time.
    
Enterprise JavaBeans
Distributed Application Lifecycle
Iterative Development/MVC
Simplifi ed Architecture and Development
Component-Based Application Models
JEE APIs and Certification
XML and JEE
Distributed Programming Services

Distributed Object Frameworks
  The current distributed object frameworks are CORBA, RMI, DCOM, and EJB. 
  The EJB specification is intended to support compliance with the range of CORBA standards, current and proposed. 
  The two technologies can function in a complementary manner. 
  CORBA provides a great standards-based infrastructure on which to build EJB containers. 
  The EJB framework makes it easier to build an application on top of a CORBA infrastructure. 
  Additionally, the recently released CORBA components specification refers to EJB as the architecture when building CORBA components in Java.

  CORBA
    CORBA is a language independent, distributed object model specified by the OMG. This architecture was created to support the development of object-oriented applications across heterogeneous computing environments that might contain different hardware platforms and operating systems.
    CORBA relies on IIOP for communications between objects. 
    The center of the CORBA architecture lies in the Object Request Broker (ORB). The ORB is a distributed programming service that enables CORBA objects to locate and communicate with one another. 
    CORBA objects have interfaces that expose sets of methods to clients. 
    To request access to an object¡¯s method, a CORBA client acquires an object reference to a CORBA server object. Then, the client makes method calls on the object reference as if the CORBA object were local to the client. 
    The ORB finds the CORBA object and prepares it to receive requests, to communicate requests to it, and then to communicate replies back to the client. 
    A CORBA object interacts with ORBs either through an ORB interface or through an Object Adapter.
  
  Java/RMI
    Java/RMI relies on a protocol called the Java Remote Method Protocol (JRMP). Java relies heavily on Java Object Serialization
    For a client to locate a server object for the first time, RMI depends on a naming mechanism called an RMIRegistry that runs on the server machine and holds information about available server objects.
    Java/RMI server objects are named using URLs, and for a client to acquire a server object reference, it should specify the URL of the server object as you would specify the URL to a HTML page.
    
  Distributed Component Object Model (DCOM)
    DCOM supports remote objects by running on a protocol called the Object Remote Procedure Call (ORPC). 
    This ORPC layer is built on top of Distributed Computing Environment¡¯s (DCE) Remote Procedure Call (RPC) and interacts with Component Object Model¡¯s (COM) runtime services. 
    A DCOM server is a body of code that is capable of serving up objects of a particular type at runtime. Each DCOM server object can support multiple interfaces, each representing a different behavior of the object. 
    A DCOM client calls into the exposed methods of a DCOM server by acquiring a pointer to one of the server object¡¯s interfaces. The client object then starts calling the server object¡¯s exposed methods through the acquired interface pointer as if the server object resided in the client¡¯s address space. 
    As specified by COM, a server object¡¯s memory layout conforms to the C++ vtable layout. Since the COM specification is at the binary level, it allows DCOM server components to be written in diverse programming languages such as C++, Java, Object Pascal (Delphi), Visual Basic, and even COBOL. 


